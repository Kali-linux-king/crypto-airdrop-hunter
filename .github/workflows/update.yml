name: Airdrop Library Automation Pipeline

on:
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours (optimized for API rate limits)
  workflow_dispatch:        # Manual trigger
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  DATABASE_PATH: 'api/database.json'
  MAX_AIRDROPS: 200

jobs:
  validate-sources:
    name: Validate Sources
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      sources_valid: ${{ steps.validation.outputs.valid }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          
      - name: Run source validation
        id: validation
        run: |
          python scripts/validation.py test
          echo "valid=$?" >> $GITHUB_OUTPUT

  scrape-data:
    name: Scrape & Process Data
    needs: validate-sources
    if: ${{ needs.validate-sources.outputs.sources_valid == '0' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        retry: [1, 2, 3]
        max-parallel: 1
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache scraped data
        uses: actions/cache@v3
        with:
          path: |
            sources.json
            ${{ env.DATABASE_PATH }}
          key: ${{ runner.os }}-scraped-${{ hashFiles('scripts/*.py') }}
          
      - name: Run scraper (Attempt ${{ matrix.retry }})
        run: |
          python scripts/scrape_airdrops.py --max ${{ env.MAX_AIRDROPS }} --retry ${{ matrix.retry }}
          
      - name: Validate output
        run: |
          if [ ! -s sources.json ]; then
            echo "Error: Empty output file"
            exit 1
          fi
          
      - name: Archive raw data
        uses: actions/upload-artifact@v3
        with:
          name: raw-scraped-data-${{ github.run_id }}
          path: sources.json
          retention-days: 3

  update-database:
    name: Update Database
    needs: scrape-data
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
        
      - name: Download scraped data
        uses: actions/download-artifact@v3
        with:
          name: raw-scraped-data-${{ github.run_id }}
          
      - name: Process data
        run: |
          python scripts/database.py --prune --limit ${{ env.MAX_AIRDROPS }}
          
      - name: Verify database
        run: |
          if [ $(jq '.airdrops | length' ${{ env.DATABASE_PATH }}) -eq 0 ]; then
            echo "Error: Empty database"
            exit 1
          fi

  deploy:
    name: Deploy Updates
    needs: update-database
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
        
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git config --global pull.rebase true
          
      - name: Pull latest changes
        run: git pull
        
      - name: Commit updates
        run: |
          git add sources.json ${{ env.DATABASE_PATH }} docs/assets/data.json
          git diff --quiet && git diff --staged --quiet || \
            (git commit -m "Automated update: $(date +'%Y-%m-%d %H:%M UTC') [skip ci]" && \
             git push origin main)
             
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          keep_files: true
          force_orphan: false
          
      - name: Trigger API rebuild
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event_type: 'api-update'
            })

  notify:
    name: Notification
    if: always()
    needs: [validate-sources, scrape-data, update-database, deploy]
    runs-on: ubuntu-latest
    
    steps:
      - name: Send Slack notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_TITLE: "ðŸ›‘ Airdrop Update Failed"
          SLACK_MESSAGE: "Workflow ${{ github.workflow }} failed on ${{ github.ref }}"
          
      - name: Send success notification
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: good
          SLACK_TITLE: "âœ… Airdrop Update Complete"
          SLACK_MESSAGE: "Successfully updated ${{ needs.update-database.outputs.count }} airdrops"